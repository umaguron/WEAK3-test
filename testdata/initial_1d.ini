[configuration]
configini = testdata/setting.ini

[toughInput]
# TOUGH3 or TOUGH2 or TOUGH3_LOCAL
simulator = TOUGH3_LOCAL
module = eco2n_v2
problemName = initial_1d
; problemName = hydrostatic_mesh1_ec2n
; mulgridFileName = 1dtest.geo
; mulgridFileName =
; t2DataFileName = t2data.dat
; gridVtkFileName = grid.vtu
; toughOutputFileName = output.listing
; resultVtuFileName = result.vtu
## MULTI ##
num_components = 3
num_equations = 4
num_phases = 3
num_secondary_parameters = 6
## PARAM.1 ##
# NOITE maximum number of iterations per time step
max_iterations = 
# KDATA (required)
print_level = 2
# MCYC (required) maximum number of time steps
max_timesteps = 2000
# MSEC maximum simulation duration (machine seconds)
max_duration =
# MCYPR (required) time step interval for printing
print_interval = 2000
# MOP (required)
# MOP(1) if unequal 0, a short printout for non-convergent iterations will be generated.
# MOP(7) if unequal 0, a printout of input data will be provided.
# MOP(11) determines evaluation of mobility and permeability at interfaces.
MOPs01 = 1
MOPs02 = 0
MOPs03 = 0
MOPs04 = 0
MOPs05 = 0
MOPs06 = 0
MOPs07 = 1
MOPs08 = 0
MOPs09 = 0
MOPs10 = 0
MOPs11 = 0
MOPs12 = 0
MOPs13 = 0
MOPs14 = 0
MOPs15 = 0
MOPs16 = 5
MOPs17 = 9
# TEXP binary diffusion temperature parameter
texp =
# BE enhanced vapour diffusion
be =
## PARAM.2 ##
# TSTART start time (seconds)
tstart =
# TIMAX (required) stop time 
tstop = 1.e20
# DELTEN (required)
const_timestep = 1.e10
# DELTMX maximum time step size in seconds (default is infinite)
max_timestep =
# ELST block name for short printout
print_block =
# GF (required) (m/s^2)
gravity = 9.81
# REDLT time step reduction factor (default is 4)
timestep_reduction = 
# SCALE grid scale factor  (default = 1.0)
scale =
## PARAM.3 ##
# RE1 convergence criterion for relative error (default= 10^-5)
relative_error = 5e-8
# RE2 convergence criterion for absolute error (default= 1)
absolute_error =
# WUP upstream weighting factor (default = 1.0 is recommended). 0 ≤ WUP ≤ 1.
upstream_weight =
# WNR Newton-Raphson weighting factor(default = 1.0 is recommended). 0 < WNR ≤ 1.
newton_weight =
# DFAC numerical derivate increment factor (DFAC)
derivative_increment =
# FOR factor to change the size of the time step during the Newtonian iteration (default =1.0)
for =
# AMRES maximum permissible residual during the Newtonian iteration.(default= 10^5).
amres =

## INCON ##
# if 'problemNamePreviousRun' is empty, hydrostatic pressure & 'PRIMARY_default' (temp., PCO2 etc.) is applied.
; problemname in same TOUGH_INPUT_DIR or arbitrary relative path of dir name includes SAVE
problemNamePreviousRun = 
# PARAM.4.DEP
PRIMARY_default =  [1.013e5, 0.0001, 0.0004, 10]

## 
# if 'problemNamePreviousRun' is empty and 'specifies_variable_INCON' is True, 
# INCON is given by arbitrary spatial range & value specified by following 'primary_sec_list'.
# Always, hydrostatic pressure is applied for X1.
# if 'primary_sec_list' is empty, value of PRIMARY_default is applied for X2,X3,....
specifies_variable_INCON = False
primary_sec_list = []
; primary_sec_list = ["prm_region1" ,"prm_region2"]

## primary variable for air layer ##
PRIMARY_AIR =  [1.013e5, 0.0001, 0.0004, 10]


## ROCK ##
# rocktypes placed in the front are overridden by those placed in the back
rockseclist = ["matrix"]

## GENER ## 
generSecList = []
; generSecList = ["gener1","gener2"]

# W/m^2
crustalHeatFlowRate = 0.1
# mm
rainfallAnnual_mm = 0
T_rain = 10

## FOFT ##
; history_block = [' fg 5', ' fg10', ' fg20', ' fg30', ' fg40', ' fg50', ' fg60', ' fg80', ' fg99']
history_block = ['  a 1']
## COFT
; history_connection = [('ATM 0', '  a 1')]
history_connection = []
prints_hc_surface = False
prints_hc_inj = False

# SELEC
selection_line1 = [1, None, None, 1, None, None, None, None, None, 0, 0, 0, 0, 0, 4, 0]
selection_line2 = [0.8, 0.8, None, None, None, None, None, None]

includesAtmos = True



[mesh]
## type
# REGULAR: ragial or recutangular
# A_VORO: amesh voronoi
type = REGULAR
## MULgraph geometry file Naming conventions (optional)
# 0: 3 characters for column followed by 2 digits for layer (default)
# 1: 3 characters for layer followed by 2 digits for column 
# 2: 2 characters for layer followed by 3 digits for column
convention = 0

mulgridFileFp = testdata/1dtest.geo

## type: 1 ##
# Used to calc. crustal heat flow.  Valid when type=1.
isRadial = False
xblocksSec = x
yblocksSec = y
rblocksSec = r
zblocksSec = z

[r]
rblockssec1 = [25]*6
rblockssec2 = 10**np.linspace(math.log10(25), math.log10(200),30)
rblockssec3 = 10**np.linspace(math.log10(200), math.log10(3196),20)

[z]
zblockssec1 = [4*1.4**i for i in range(0,10)]+[100]*10+[100]*65
[x]
zblockssec1 = [100]
[y]
zblockssec1 = [100]


[matrix]
# 5 characters long
name = matrx
nad = 2
density = 2500.0
porosity = 0.2
permeability_x = 1e-14
permeability_y = 1e-14
permeability_z = 1e-14
conductivity = 2.8
specific_heat = 1000.0
regionseclist = ["matrix_region"]
# type=1 -> linear
# param: [rp1,rp2,rp3,rp4]
#    krl increases from 0-1 in range rp1 <= Sl <= rp3
#    krg increases from 0-1 in range rp2 <= Sl <= rp4
# type=3 -> Corey's curves (1954)
# param: [Slr, Sgr]
#  Slr, Sgr -> residual(irreducible) saturations for liquid and gas, respectively 
irp = 3
rp = [0.33, 0.05]
# type=1 -> linear
# param: [cp1,cp2,cp3]
icp = 1
cp = [10000, 0.33, 0.95]
# define converter
## available parameter
##  k_x: rock permeability[x]
##  rho: resistivity
##  phi: porosity
##  x,y,z: coordinates
## available function (defined in functionUtil.py)
##  fu.HS_U_conductivity2porosity(rho, cond_matrix, cond_liq, upper, lower)
formula_resistivity2porosity = 1
formula_porosity2permeability = 10**max(-18+5/10000*(10000+(z-2000)),-18)
; formula_resistivity2porosity = fu.HS_U_conductivity2porosity(rho, 0.002, 10, 0.3, 0.001)
; formula_porosity2permeability = 0.001**2*phi**3/180/(1-phi**2)

[matrix_region]
# defined by following extent containing the block center
xmin = -9999999
xmax = 9999999
ymin = -9999999
ymax = 9999999
zmin = -9999999
zmax = 9999999

[condt]
# 5 characters long
name = condt
nad = 2
density = 2500.0
porosity = 0.2
permeability_x = 1e-14
permeability_y = 1e-14
permeability_z = 1e-14
conductivity = 2.8
specific_heat = 1000.0
regionseclist = ["condt_region"]
irp = 3
rp = [0.33, 0.05]
icp = 1
cp = [10000, 0.33, 0.95]
# define converter
formula_resistivity2porosity = 1
formula_porosity2permeability = 10**max(-18+5/10000*(10000+(z-2000)),-15)

[condt_region]
# defined by following extent containing the block center
xmin = 800
xmax = 1200
ymin = -200
ymax = 200
zmin = -10000
zmax = 10000


[prm_region1]
value = [1.013e5, 0.001, 0.001, 40]
xmin = 0
xmax = 9999999
ymin = 0
ymax = 9999999
zmin = -1000
zmax = -500

[prm_region2]
value = [1.013e5, 0.01, 0.001, 40]
xmin = 0
xmax = 9999999
ymin = 0
ymax = 9999999
zmin = -9999999
zmax = -1000


[gener1]
# 3 characters + 2 integer 
name = CO2 1
; block =  ["  a99"]
block =  [" ga99"," gb99"," gc99"," ff99"," fg99"," fh99"," ek99"," el99"," em99"]
# kg/s
type = COM3
# GX
; flux = [11.574*((25*i)**2-(25*(i-1))**2)/(25*6)**2 for i in range(1,7)]
flux = [11.574/9]*9
temperature = 300

# how to inject
injectsIndirectly = False
# if injectsIndirectly is True, set:
area = [((25*i)**2-(25*(i-1))**2)*math.pi for i in range(1,7)]
vol_injblock = 1
dist_injblock = [0.00001,12.5]

# time dependent generation rate 
# LTAB (default(constant injection rate) = 0)
;ltab = 4
# F1 generation times in second
;time = [0,3600*24*365*5, 3600*24*365*10,1e20]
# F2(flux rate) = flux(GX) * flux_factor  
;flux_factor = [1,1, 0.5, 0.5]

# if injectsIndirectry is False, you can asign time dependent injection enthalpy 
# ITAB (this setting is valid only if injectsIndirectly is False)
;itab = 0
# F3: (Enthalpy) = enthalpy(EX) * enthalpy_factor 
#     (this setting is valid only if injectsIndirectly is False)

;enthalpy_factor =[1,1,1,1]


[gener2]
# 3 characters + 2 integer 
name = WAT 1
; block =  ["  a99"]
block =  [" ga99"," gb99"," gc99"," ff99"," fg99"," fh99"," ek99"," el99"," em99"]
type = WATE
# kg/s
; flux = [27.777*((25*i)**2-(25*(i-1))**2)/(25*6)**2 for i in range(1,7)]
; flux = [2*((25*i)**2-(25*(i-1))**2)/(25*6)**2 for i in range(1,7)]
flux = [27.777/9]*9
temperature = 300

# how to inject
injectsIndirectly = False
# if injectsIndirectly is True, need to set:
area = [((25*i)**2-(25*(i-1))**2)*math.pi for i in range(1,7)]
vol_injblock = 1
dist_injblock = [0.00001,12.5]

# time dependent generation rate 
# LTAB (default(constant injection rate) = 0)
;ltab = 4
# F1 generation times in second
;time = [0,3600*24*365*5, 3600*24*365*10,1e20]
# F2(flux rate) = flux(GX) * flux_factor  
;flux_factor = [1, 1, 0.5, 0.5]

# if injectsIndirectry is False, you should asign time dependent injection enthalpy 
# ITAB (this setting is valid only if injectsIndirectly is False)
;itab = 4
# F3: (Enthalpy) = enthalpy(EX) * enthalpy_factor 
#     (this setting is valid only if injectsIndirectly is False)
;enthalpy_factor =[1,1,1,1]

[plot]
slice_plot_limits = ((-4000,4000),(-8000,2500))
slice_plot_variables_T3 = ['TEMP', 'SAT_G', 'SAT_S', 'X_WATER_G', 'X_CO2_G', 'X_WATER_L', 'X_NaCl_L', 'X_CO2_L']
slice_plot_variables_T2 = ['T', 'SG']
# this value must larger than 0.0001
gif_minimun_print_interval_sec = 1000
# create vertical profile at each specified columns in t2outUtil.column_plot_INCON2()
columns_incon_plot = ['  a','  i','  k','  m','  o','  q','  s','  u','  v','  w', ' ah']
# If true, data are read from directory where inputIni file put.
# It is useful for redrawing result which has been moved from the original dir
reads_data_from_current_dir = False
# elements of the list are passed to the argument line= in mulgrid.slice_plot
profile_lines_list=["x"]

[solver]
# SOLVR (Internal Serial Solver)
# selects the linear equation solver
#   1: (void)
#   2: DSLUBC, a bi-conjugate gradient solver
#   3: DSLUCS, a Lanczos-type bi-conjugate gradient solver (default)
#   4: DSLUGM, a generalized minimum residual solver
#   5: DLUSTB, a stabilized bi-conjugate gradient solver
#   6: direct solver LUBAND
#   8: PETSc parallel iterative solver
MATSLV = 1
# selects the Z-preconditioning (Moridis and Pruess, 1998). 
#   Z0:  no Z-preprocessing (default for NEQ=1) 
#   Z1:  replace zeros on the main diagonal by a small constant (1.e-25; default for NEQ ≠ 1)) 
#   Z2:  make linear combinations of equations for each grid block to achieve non-zeros on the main diagonal 
#   Z3:  normalize equations, followed by Z2 
#   Z4:  affine transformation to unit main-diagonal submatrices, without center pivoting 
ZPROCS = 
# selects the O-preconditioning (Moridis and Pruess, 1998) 
#   O0:  no O-preprocessing (default, also invoked for NEQ=1) 
#   O1:  eliminate lower half of the main-diagonal submatrix with center pivoting 
#   O2:  O1, plus eliminate upper half of the main-diagonal submatrix with center pivoting 
#   O3:  O2, plus normalize, resulting in unit main-diagonal submatrices 
#   O4:  affine transformation to unit main-diagonal submatrices, without center pivoting 
OPROCS = 
# selects the maximum number of CG iterations as a fraction of the total number of equations (0.0 < RITMAX ≤ 1.0; default is RITMAX = 0.1) 
RITMAX = 
# convergence criterion for the CG iterations (1.e-12 ≤ CLOSUR ≤ 1.e-6; default is CLOSUR = 1.e-6) 
CLOSUR = 

# PETSc solver (when MATSLV=8)
# number of processors
nProc = 8
# Solvers
#  - bicg (bi-conjugate gradient method)
#  - bcgsl (stabilized version of bi-conjugate gradient method) 
#  - cg (conjugate gradient method)
#  - minres (minimum residual gradient)
#  - gmres (generalized minimal residual method)
#  - fgmres (flexible generalized minimal residual method)
ksp_type = bcgsl
# preconditioner
#  - jacobi (point Jacobi preconditioner)
#  - pbjacobi (point block Jacobi preconditioner) 
#  - bjacobi (block Jacobi preconditioner)
#  - asm (restricted additive Schwarz method)
#  - ilu (incomplete factorization preconditioner)
#  - icc (incomplete Cholesky factorization preconditioner) 
#  - jacobi (diagonal scaling preconditioning)
pc_type = asm
# relative convergence tolerance
#   any real number
ksp_rtol = 