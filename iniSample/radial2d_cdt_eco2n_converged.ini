[configuration]
# relative path (from project root) where directory for this problem is to be created
TOUGH_INPUT_DIR =  iniSample/

[toughInput]
# TOUGH3 or TOUGH2 or TOUGH3_LOCAL
simulator = TOUGH3
module = eco2n_v2
problemname = radial2d_cdt_eco2n_converged
## MULTI ##
num_components = 3
num_equations = 4
num_phases = 3
num_secondary_parameters = 6
## PARAM.1 ##
# NOITE maximum number of iterations per time step
max_iterations = 
# KDATA (required)
print_level = 2
# MCYC (required) maximum number of time steps
max_timesteps = 2000
# MSEC maximum simulation duration (machine seconds)
max_duration =
# MCYPR (required) time step interval for printing
print_interval = 2000
# MOP (required)
# MOP(1) if unequal 0, a short printout for non-convergent iterations will be generated.
# MOP(7) if unequal 0, a printout of input data will be provided.
# MOP(11) determines evaluation of mobility and permeability at interfaces.
MOPs01 = 1
MOPs02 = 0
MOPs03 = 0
MOPs04 = 0
MOPs05 = 0
MOPs06 = 0
MOPs07 = 1
MOPs08 = 0
MOPs09 = 0
MOPs10 = 0
MOPs11 = 0
MOPs12 = 0
MOPs13 = 0
MOPs14 = 0
MOPs15 = 0
MOPs16 = 4
MOPs17 = 9
# TEXP binary diffusion temperature parameter
texp =
# BE enhanced vapour diffusion
be =
## PARAM.2 ##
# TSTART start time (seconds)
tstart =
# TIMAX (required) stop time 
tstop = 536479200000.0
# DELTEN (required)
const_timestep = 1.e2
# DELTMX maximum time step size in seconds (default is infinite)
max_timestep =
# ELST block name for short printout
print_block =
# GF (required) (m/s^2)
gravity = 9.81
# REDLT time step reduction factor (default is 4)
timestep_reduction = 
# SCALE grid scale factor  (default = 1.0)
scale =
## PARAM.3 ##
# RE1 convergence criterion for relative error (default= 10^-5)
relative_error = 1e-8
# RE2 convergence criterion for absolute error (default= 1)
absolute_error =
# WUP upstream weighting factor (default = 1.0 is recommended). 0 ≤ WUP ≤ 1.
upstream_weight =
# WNR Newton-Raphson weighting factor(default = 1.0 is recommended). 0 < WNR ≤ 1.
newton_weight =
# DFAC numerical derivate increment factor (DFAC)
derivative_increment =
# FOR factor to change the size of the time step during the Newtonian iteration (default =1.0)
for =
# AMRES maximum permissible residual during the Newtonian iteration.(default= 10^5).
amres =

## INCON ##
# if 'problemNamePreviousRun' is empty, hydrostatic pressure & 'PRIMARY_default' (temp., PCO2 etc.) is applied.
; problemname in same TOUGH_INPUT_DIR or arbitrary relative path of dir name includes SAVE
; problemNamePreviousRun = resultConverged/mesh5_dz25m_cr0.1_noSaltCO2_hydrostatic_noPorositySetting
problemNamePreviousRun = 
1d_hydrostatic_sim_result_ini = 
initial_t_grad = 50

# PARAM.4.DEP
PRIMARY_default = [101300.0, 4e-05, 0.0, 10]
## 
# if 'problemNamePreviousRun' is empty and 'specifies_variable_INCON' is True, 
# INCON is given by arbitrary spatial range & value specified by following 'primary_sec_list'.
# Always, hydrostatic pressure is applied for X1.
# if 'primary_sec_list' is empty, value of PRIMARY_default is applied for X2,X3,....
specifies_variable_INCON = False
primary_sec_list = []
## ROCK ##
# rocktypes placed in the front are overridden by those placed in the back
rockseclist = ['matrix', 'bound', 'cdt']
seedflg = False

## GENER ## 
generseclist = ["gener1", "gener2", "gener3"]
# W/m^2
crustalheatflowrate = 0.1
# mm
rainfallAnnual_mm = 0
T_rain = 10
## FOFT ##
history_block = ['  a 1', '  a20', '  a40', '  a65', '  a99']
## COFT ##

history_connection = []
prints_hc_surface = True
prints_hc_inj = True

# SELEC
selection_line1 = [1, None, None, 1, None, None, None, None, None, 0, 0, 0, 0, 0, 4, 0]
selection_line2 = [0.8, 0.8, None, None, None, None, None, None]

# TIMES
# !! all following variables must be provided to set TIMES section 
# TIMES.1
; ITI: number of times provided on records TIMES.2, TIMES.3, etc.
num_times_specified = 1
; ITE: total number of times desired (ITI ≤ ITE; default is ITE = ITI).
num_times = 0
; DELAF: maximum time step size after any of the prescribed times have been reached (default is infinite).
max_timestep_TIMES = 1e20
; TINTER: time increment for times with index ITI, ITI +1, ..., ITE.
time_increment = 1e6
# TIMES.2, TIMES.3, ...
; TIS(I): list of times (in ascending order) at which printout is desired.
time = [3600*24*365*90]

# focus heat flow
assignFocusHf = False
# W/m2
focusHfRate = 1.0
# [x1min, x1max, x2min, x2max]
focusHfRange = [0, 1000, 0, 1]

[atmosphere]
includesatmos = True
# primary variable for air layer 
primary_air = [101300.0, 4e-05, 0.0, 10]
nad = 2
density = 2650.0
porosity = 0.9999
permeability = [0,0,1e-12]
conductivity = 2.51
specific_heat = 1e20
tortuosity = 1.0
irp = 1
rp = [0.1, 0.0, 1.0, 0.1]
icp = 1
cp = [0.0, 0.0, 1.0]

[boundary]
boundary_side_permeable = True

[mesh]
mulgridfilefp = iniSample/radial2d_cdt_eco2n_converged.geo
## type
# REGULAR: ragial or recutangular
# A_VORO: amesh voronoi
type = REGULAR
# used to calc. crustal heat flow
isRadial = True
rblocksSec = r
zblocksSec = z
## MULgraph geometry file Naming conventions (optional)
# 0: 3 characters for column followed by 2 digits for layer (default)
# 1: 3 characters for layer followed by 2 digits for column 
# 2: 2 characters for layer followed by 3 digits for column
convention = 0

[r]
rblockssec1 = [15]*6
rblockssec2 = 10**np.linspace(math.log10(15), math.log10(200),30)
rblockssec3 = 10**np.linspace(math.log10(200), math.log10(3196),20)

[z]
zblockssec1 = 10**np.linspace(math.log10(5), math.log10(25), 10)
zblockssec2 = [50]*43

[matrix]
# 5 characters long
name = matrx
nad = 2
density = 2500.0
porosity = 0.1
permeability_x = 1e-15
permeability_y = 1e-15
permeability_z = 1e-15
conductivity = 2.0
specific_heat = 1000.0
regionseclist = ["matrix_region"]
irp = 3
rp = [0.33, 0.05]
icp = 1
cp = [10000, 0.33, 0.95]
formula_porosity = None
formula_permeability = None
rock_assign_condition = True

[matrix_region]
# defined by following extent containing the block center
xmin = 0
xmax = 9999999
ymin = 0
ymax = 9999999
zmin = -9999999
zmax = 0

[bound]
name = bound
nad = 2
density = 2500.0
porosity = 0.1
permeability_x = 1e-15
permeability_y = 1e-15
permeability_z = 1e-15
conductivity = 2.0
specific_heat = 1000.0
regionseclist = ["boundary_region"]
irp = 3
rp = [0.33, 0.05]
icp = 1
cp = [10000, 0.33, 0.95]
formula_porosity = None
formula_permeability = None
rock_assign_condition = True

[boundary_region]
# defined by following extent containing the block center
xmin = 22000
xmax = 9999999
ymin = 0
ymax = 9999999
zmin = -9999999
zmax = 0

[cdt]
name = cdt
nad = 2
density = 2500.0
porosity = 0.1
permeability_x = 1e-13
permeability_y = 1e-13
permeability_z = 1e-13
conductivity = 2.0
specific_heat = 1000.0
regionseclist = ["cdt_region"]
irp = 3
rp = [0.33, 0.05]
icp = 1
cp = [10000, 0.33, 0.95]
formula_porosity = None
formula_permeability = None
rock_assign_condition = True

[cdt_region]
xmin = 0
xmax = 90
ymin = 0
ymax = 9999999
zmin = -9999999
zmax = -300

[gener1]
# 3 characters + 2 integer 
name = CO2 1
block = ["  a53","  b53","  c53","  d53","  e53","  f53"]
type = COM3
flux = [0.15*((15*i)**2-(15*(i-1))**2)/(15*6)**2 for i in range(1,7)]
temperature = 300
injectsindirectly = False

[gener2]
# 3 characters + 2 integer 
name = WAT 1
block = ["  a53","  b53","  c53","  d53","  e53","  f53"]
type = WATE
flux = [25*((15*i)**2-(15*(i-1))**2)/(15*6)**2 for i in range(1,7)]
temperature = 300
injectsindirectly = False

[gener3]
name = SAL 1
block = ["  a53","  b53","  c53","  d53","  e53","  f53"]
type = COM2
flux = [0.5*((15*i)**2-(15*(i-1))**2)/(15*6)**2 for i in range(1,7)]
temperature = 300
injectsindirectly = False

[plot]
slice_plot_limits = ((-100,2500),(-2500,100))
slice_plot_variables_t3 = ['RES', 'TEMP', 'SAT_G', 'SAT_S', 'X_WATER_G', 'X_CO2_G', 'X_WATER_L', 'X_NaCl_L', 'X_CO2_L', 'FLOW']
slice_plot_variables_t2 = ['T', 'SG']
gif_minimun_print_interval_sec = 1000
reads_data_from_current_dir = False
profile_lines_list = ["x"]
xoft_t_range = None

[solver]
# SOLVR (Internal Serial Solver)
# selects the linear equation solver
#   1: (void)
#   2: DSLUBC, a bi-conjugate gradient solver
#   3: DSLUCS, a Lanczos-type bi-conjugate gradient solver (default)
#   4: DSLUGM, a generalized minimum residual solver
#   5: DLUSTB, a stabilized bi-conjugate gradient solver
#   6: direct solver LUBAND
#   8: PETSc parallel iterative solver
MATSLV = 8
# selects the Z-preconditioning (Moridis and Pruess, 1998). 
#   Z0:  no Z-preprocessing (default for NEQ=1) 
#   Z1:  replace zeros on the main diagonal by a small constant (1.e-25; default for NEQ ≠ 1)) 
#   Z2:  make linear combinations of equations for each grid block to achieve non-zeros on the main diagonal 
#   Z3:  normalize equations, followed by Z2 
#   Z4:  affine transformation to unit main-diagonal submatrices, without center pivoting 
ZPROCS = 
# selects the O-preconditioning (Moridis and Pruess, 1998) 
#   O0:  no O-preprocessing (default, also invoked for NEQ=1) 
#   O1:  eliminate lower half of the main-diagonal submatrix with center pivoting 
#   O2:  O1, plus eliminate upper half of the main-diagonal submatrix with center pivoting 
#   O3:  O2, plus normalize, resulting in unit main-diagonal submatrices 
#   O4:  affine transformation to unit main-diagonal submatrices, without center pivoting 
OPROCS = 
# selects the maximum number of CG iterations as a fraction of the total number of equations (0.0 < RITMAX ≤ 1.0; default is RITMAX = 0.1) 
RITMAX = 
# convergence criterion for the CG iterations (1.e-12 ≤ CLOSUR ≤ 1.e-6; default is CLOSUR = 1.e-6) 
CLOSUR = 

# PETSc solver (when MATSLV=8)
# number of processors
nProc = 8
# Solvers
#  - bicg (bi-conjugate gradient method)
#  - bcgsl (stabilized version of bi-conjugate gradient method) 
#  - cg (conjugate gradient method)
#  - minres (minimum residual gradient)
#  - gmres (generalized minimal residual method)
#  - fgmres (flexible generalized minimal residual method)
ksp_type = bcgsl
# preconditioner
#  - jacobi (point Jacobi preconditioner)
#  - pbjacobi (point block Jacobi preconditioner) 
#  - bjacobi (block Jacobi preconditioner)
#  - asm (restricted additive Schwarz method)
#  - ilu (incomplete factorization preconditioner)
#  - icc (incomplete Cholesky factorization preconditioner) 
#  - jacobi (diagonal scaling preconditioning)
pc_type = asm
# relative convergence tolerance
#   any real number
ksp_rtol = 
